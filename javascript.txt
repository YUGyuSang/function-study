alert() 알려줌
prompt() 입력 받음
confirm() 확인 받음

//입력 값 : 홍길동
const name =prompt("이름을 입력하세요")
alert (`안녕하세요, ${name}님, 환영합니다`)
//출력 : 안녕하세요, 홍길동님, 환영합니다

prompt("예약일입력","2023-10-") 이런식으로 두개에 입력값을 보낼 수 있다.

confirm("당신은 성인입니까")
//확인을 누르면 true 를 출력
//취소를 누르면 false 를 출력

prompt 입력 -> 문자형

문자형으로 받아도 나누기 같은 표현식은 숫자형으로 자동으로 바뀐다. 이런 것을 자동 형변환이라고 한다.

String -> 문자형으로 변환
Number -> 숫자형으로 변환 * Number("문자") // NaN
Boolean -> 불린형으로 변환 (
false
- 숫자 0
- 빈 문자열 ''
- null
- undefined
- NaN
)

동등 연산자
a=1; b="1"

a==b // true
a===b // false 
===(일치연산자) 이것을 이용하면 타입까지 비교해준다.

if,else (조건문)

if(age > 19){
    환영
} 

if(age > 19){
    환영
}else{
    돌아가
}

 논리 연산자
 || OR 한개라도 참이면 true
 && AND 한개라도 참이 아니면 false
 ! NOT true 면 false false 면 true

 반복문(for, while, do while)
 
 for(let i = 0; i<n i++){
    //코드
 }

 while(i<n){
    //코드
    i++
 }

 do{
    //코드
    i++
 }while(i<n) // do while은 많이 사용하지 않는다.


const fruit = prompt("사과 몇번?")
 switch(fruit){
    case '사과1' : 100
        break;
    case '사과2' : 200
        break;
    case '사과3' : 300
        break;
    default :
        그런과일은 없어
 }

 함수

 function 함수명(매개변수,매개변수){
    //코드
 }

 함수명() // 함수 호츨
 유지보수가 쉽다.

 function sayHello(name){
    const mag = `hello ${name}`;
    console.log(msg);
 }

 sayHello('홍길동');

 // hello 홍길동



 let msg = "welcome"; //전역변수

 function sayHello(name){
    let msg = hello; //지역변수
    console.log(msg + ' ' + name) 
 }
sayHello(홍길동) // hello 홍길동 출력
console.log(msg) // welcome 출력

function sayHello(name){
    let newName = name || "임시 이름"
    let msg = `hello ${name} `
    console.log(msg);
}
sayHello() // hello 임시 이름
sayHello(홍길동) // hello 홍길동

- 한번에 한작업에 집중
- 읽기 쉽고 어떤 동작인지 알 수 있게 네이밍 하기

function sayHello(){ 
// 함수 선언문 :어디서든 호출 가능
}
sayHello()

let sayHello = function(){ 
// 함수 표현식
}
sayHello()

화살표 햠수 표현하기
let add = function(num1, num2){ // 함수 선언문
    return num1 + num2;
}

let add = (num1, num2) => { //화살표 함수
    return num1 + num2
}

let add = (num1, num2) => (num1 + num2;) 
let sayHello = (name) => (`hello ${name}`;)

객체
const superman = {
    name:'홍길동',
    age:'20',
}

객체에 접근
superman.name
superman['age']

객체 추가
superman.gender = 'boy';
superman['hairColor']='red';

삭제
delete superman.hairColor;

Object - 단축 프로퍼티
const name = '홍길동';
const age = 33;

const superman = {
    name, // name= name
    age, // age = age
    gender : 'boy'
}

superman.birthDay; // undefined
존재하지 않는 프로퍼티를 실행을 시키면 undefined 가 뜬다.

'birthDay' in superman;
//false

'age' in superman;
//true

for ...in 반복문
for(let key in  superman){
    console.log(key)
    console.log(superman[key])
}

const makeObject = (name, age)=>{
    retrun{
        name: name,
        age : age,
        hobby : "football"
    };
}

const Mike = makeObject("Mike", 20);
console.log(Mike);

method : 객체 프로퍼티로 할당 된 함수
superman.fly(); // fly가 메소드
const superman={
    name:'홍길동',
    age: 20,
    fly(){
        console.log('날아갑니다')
    }
}

let boy = {
    name:'홍길동',
    sayHello,
}

let girl = {
    name:'홍순동",
    sayHello,
}

sayHello : function(){
    console.log(`hellom i'm ${this.name}`);
}
화살표 함수는 일반 함수와는 달리 자신만의 this를 가지지 않음 화살표
화살표 함수 내부에서 this를 사용하면, 그 this는 외부에서 값을 가져온다.
객체에 메소드를 작성 할 때는 화살표 함수를 사용하지 말자.

this는 해당 객체를 가리킨다.

Array 배열

let students = ['철수', '훈이', ... '짱구'];
고유번호를 index라고 한다. index는 0 부터 시작

배열은 문자 뿐만 아니라, 숫자, 객체, 함수 등도 포함할 수 있다.
let arr =[
    '민수',
    3,
    false,
    {
        name : '짱구'
        age : 30,
    },
    function(){
        console.log('짱구 가족');
    }
] // 이런식으로 여러가지를 배열에 넣을 수 있다.

length : 배열의 길이
students.length

push(): 배열 끝에 추가
let days = ['월','화','수']
days.psuh('목')
console.log(days) // ['월','화','수','목']

pop(): 배열 끝 요소 제거
let days=['월','화','수'];
days.pop()
console.log(days) // ['월','화']

unshift() : 배열 앞에 추가
let days = ['월','화','수']
days.unshift('일')
console.log(days) // ['일','월','화','수']

shift() : 배열 앞에 제거
let days = ['일','월','화','수']
days.shift()
console.log(days) // ['월','화','수']

let days = ['월','화','수'];
for(let index = 0; index < days.length; index++){
    console.log(days[index])
}

호이스팅 
- 스코프 내부 어디서든 변수 선언은 최상위에 선언된 것 처럼 행동

변수의 생성과정
1. 선언 단계
2. 초기화 단계
3. 할당 단계

var 함수 스코프
let, const 블록 스코프

if(age>19){
    var txt = '성인';
}
console.log(txt); // '성인' var는 이런식으로 사용가능 하지만 const, let는 같이 있어야 가능 하지만 var도 함수 내에서 선언하면 사용 할 수 없음

객체 리터럴
생성자 함수
사용하는 이유 비슷한 여러 객체를 만들기 위해 사용
붕어빵 틀이라고 생각하자
function User(name, age){ // 생성자 함수명을 정할 때는 첫글자는 대문자로 하자
    this.name = name;
    this.age = age;
}
let user1 = new User('홍길동', 30); // new 연산자를 사용해서 호출
let user2 = new User('짱구', 5);

Object.assign(): 객체 복제
const newUser = Object.assign({}, user) 
이런식으로 하면 같은 객체가 아님

Object.keys(): 키 배열 반환
const user ={
    name : '홍길동',
    age : 30,
    gender : 'male'
}
Object.keys(user) // ["name","age","gender"] 로 출력

Object.vlaues(): 값 배열 반환
 const user ={
    name : '홍길동',
    age : 30,
    gender : 'male'
}
Object.vlaues(user) // ["홍길동",30,"male"]로 값만 가져옴

Object.entries(): 키/값 배열 반환 

Object.fromEntries(): 키/값 배열을 객체로 만들어준다.
const arr = [
    ["name","홍길동"],
    ["age",30],
    ["gender","male"]
];
Object.fromEntries(arr) // {
    name : '홍길동',
    age : 30,
    gender : 'male'
}로 출력

심볼(Symbol):유일성 보장 
const a = Symbol(); // new를 붙이지 않습니다!

Symbol.for(): 전역 심볼
하나의 심볼만 보장받을 수 있음
없으면 만들고, 있으면 가져오기 때문
Symbol 함수는 매번 다른 Symbol 값을 생성하지만,
Symbol.for 메소드는 하나를 생성한 뒤 키를 통해 같은 Symbol을 공유

toString() 
10진수를 2진수 16진수를 바꾸어준다.

Math.ceil()
올림
Math.floor()
내림
Math.round()
반올림
toFixed() // 문자를 변환 Number로 바꾸어 표현
소수점 자릿수
parseInt()
문자열을 숫자로 바꾸어준다. 
parseFloat()
부등 소수점을 반환한다.
Math.abs()
절대 값
Math.pow(n,m)
제곱

`이거는 여러줄로 표현 할 수 있어 편한다.
'',"" 이것은 error가 난다. 

toUpperCase(): 모든 영어 문자를 대문자로 바꾸어줌.
toLowerCase(): 모든 영어 문자를 소문자로 바꾸어줌.

slice(n,m) n시작점, m은 끝점
trim() : 앞 뒤 공백 제거

indexOf를 사용 할 때 주의 점 조건을 줄 때 >-1을 꼭 넣어주자

Array 메소드

splice(n,m) : 특정 요소 지움
splice(n,m,x) : 특정 요소 지우고 추가

forEach(fn): 배열 반복
let users = ['mike','tom','jane'];
users.forEach((name, index) =>{
    console.log(`${index + 1}, ${name}`);
});

includes(): 포함하는지 확인 있으면 ture 없으면 false

find(fn)/findIndex(fn) : 첫 번째 ture 값만 반환하고 끝 없으면 undefined를 반환
let arr = [1,2,3,4,5]
const result = arr.find((item)=>{
    retrun item % 2 === 0;
})
console.log(result) // 2 짝수만 찾아준다.

filter(fn) : 만족하는 모든 요소를 배열로 반환
reverse() : 역순으로 재정렬

map() : 실무에서 엄청 쓰임 함수를 받아 특정 기능을 시행하고 새로운 배열을 반환

sort() : 배열 재정렬 주의! 배열 자체가 변경됨 함수를 인수로 받음
let arr = [27,8,5,13]

arr.sort((a,b) => {
    return a - b;
})

Lodash라는 라이브러리 많이 쓰임 꼭 공부해보기

reduce(누적 계산값, 현재 값) : 인수를 함수로 받음
let arr = [1,2,3,4,5];

const result = arr.reduce((prev, cur)=>{
    return prev + cur
}, 0//초기값)

구조 분해 할당 구문은 배열이나 객체의 속성을 분해해서 그 값을 변수에 담을 수 있게 하는 표현식

나머지 매개변수, 전개구문

arguments
- 함수로 넘어 온 모든 인수에 접근
- 함수내에서 이용 가능한 지역 변수
- length/index
- Array 형태의 객체
- 배열의 내장 메서드 없음

나머지 매개변수
function showName(...names){ // 전달하는 값이 개수를 모를 때 사용
    console.log(names);
}
showName(); // []
showName('홍길동'); // ['홍길동']

전개구문
//arr1 을 [4,5,6,1,2,3]으로 변환하기

let arr1 = [1,2,3]
let arr2 = [4,5,6]

arr1 = [...arr2,...arr1];
console.log(arr1);

클로저(Closure) //공부하기 잘 모르겠다.

setTimeout(fn, 3000) //3초뒤에 코드 실행
setInterval(fn, 3000)//3초뒤에 코드 반복 실행