alert() 알려줌
prompt() 입력 받음
confirm() 확인 받음

//입력 값 : 홍길동
const name =prompt("이름을 입력하세요")
alert (`안녕하세요, ${name}님, 환영합니다`)
//출력 : 안녕하세요, 홍길동님, 환영합니다

prompt("예약일입력","2023-10-") 이런식으로 두개에 입력값을 보낼 수 있다.

confirm("당신은 성인입니까")
//확인을 누르면 true 를 출력
//취소를 누르면 false 를 출력

prompt 입력 -> 문자형

문자형으로 받아도 나누기 같은 표현식은 숫자형으로 자동으로 바뀐다. 이런 것을 자동 형변환이라고 한다.

String -> 문자형으로 변환
Number -> 숫자형으로 변환 * Number("문자") // NaN
Boolean -> 불린형으로 변환 (
false
- 숫자 0
- 빈 문자열 ''
- null
- undefined
- NaN
)

동등 연산자
a=1; b="1"

a==b // true
a===b // false 
===(일치연산자) 이것을 이용하면 타입까지 비교해준다.

if,else (조건문)

if(age > 19){
    환영
} 

if(age > 19){
    환영
}else{
    돌아가
}

 논리 연산자
 || OR 한개라도 참이면 true
 && AND 한개라도 참이 아니면 false
 ! NOT true 면 false false 면 true

 반복문(for, while, do while)
 
 for(let i = 0; i<n i++){
    //코드
 }

 while(i<n){
    //코드
    i++
 }

 do{
    //코드
    i++
 }while(i<n) // do while은 많이 사용하지 않는다.


const fruit = prompt("사과 몇번?")
 switch(fruit){
    case '사과1' : 100
        break;
    case '사과2' : 200
        break;
    case '사과3' : 300
        break;
    default :
        그런과일은 없어
 }

 함수

 function 함수명(매개변수,매개변수){
    //코드
 }

 함수명() // 함수 호츨
 유지보수가 쉽다.

 function sayHello(name){
    const mag = `hello ${name}`;
    console.log(msg);
 }

 sayHello('홍길동');

 // hello 홍길동



 let msg = "welcome"; //전역변수

 function sayHello(name){
    let msg = hello; //지역변수
    console.log(msg + ' ' + name) 
 }
sayHello(홍길동) // hello 홍길동 출력
console.log(msg) // welcome 출력

function sayHello(name){
    let newName = name || "임시 이름"
    let msg = `hello ${name} `
    console.log(msg);
}
sayHello() // hello 임시 이름
sayHello(홍길동) // hello 홍길동

- 한번에 한작업에 집중
- 읽기 쉽고 어떤 동작인지 알 수 있게 네이밍 하기

function sayHello(){ 
// 함수 선언문 :어디서든 호출 가능
}
sayHello()

let sayHello = function(){ 
// 함수 표현식
}
sayHello()

화살표 햠수 표현하기
let add = function(num1, num2){ // 함수 선언문
    return num1 + num2;
}

let add = (num1, num2) => { //화살표 함수
    return num1 + num2
}

let add = (num1, num2) => (num1 + num2;) 
let sayHello = (name) => (`hello ${name}`;)

객체
const superman = {
    name:'홍길동',
    age:'20',
}

객체에 접근
superman.name
superman['age']

객체 추가
superman.gender = 'boy';
superman['hairColor']='red';

삭제
delete superman.hairColor;

Object - 단축 프로퍼티
const name = '홍길동';
const age = 33;

const superman = {
    name, // name= name
    age, // age = age
    gender : 'boy'
}

superman.birthDay; // undefined
존재하지 않는 프로퍼티를 실행을 시키면 undefined 가 뜬다.

'birthDay' in superman;
//false

'age' in superman;
//true

for ...in 반복문
for(let key in  superman){
    console.log(key)
    console.log(superman[key])
}

const makeObject = (name, age)=>{
    retrun{
        name: name,
        age : age,
        hobby : "football"
    };
}

const Mike = makeObject("Mike", 20);
console.log(Mike);

method : 객체 프로퍼티로 할당 된 함수
superman.fly(); // fly가 메소드
const superman={
    name:'홍길동',
    age: 20,
    fly(){
        console.log('날아갑니다')
    }
}

let boy = {
    name:'홍길동',
    sayHello,
}

let girl = {
    name:'홍순동",
    sayHello,
}

sayHello : function(){
    console.log(`hellom i'm ${this.name}`);
}
화살표 함수는 일반 함수와는 달리 자신만의 this를 가지지 않음 화살표
화살표 함수 내부에서 this를 사용하면, 그 this는 외부에서 값을 가져온다.
객체에 메소드를 작성 할 때는 화살표 함수를 사용하지 말자.

this는 해당 객체를 가리킨다.

Array 배열

let students = ['철수', '훈이', ... '짱구'];
고유번호를 index라고 한다. index는 0 부터 시작

배열은 문자 뿐만 아니라, 숫자, 객체, 함수 등도 포함할 수 있다.
let arr =[
    '민수',
    3,
    false,
    {
        name : '짱구'
        age : 30,
    },
    function(){
        console.log('짱구 가족');
    }
] // 이런식으로 여러가지를 배열에 넣을 수 있다.

length : 배열의 길이
students.length

push(): 배열 끝에 추가
let days = ['월','화','수']
days.psuh('목')
console.log(days) // ['월','화','수','목']

pop(): 배열 끝 요소 제거
let days=['월','화','수'];
days.pop()
console.log(days) // ['월','화']

unshift() : 배열 앞에 추가
let days = ['월','화','수']
days.unshift('일')
console.log(days) // ['일','월','화','수']

shift() : 배열 앞에 제거
let days = ['일','월','화','수']
days.shift()
console.log(days) // ['월','화','수']

let days = ['월','화','수'];
for(let index = 0; index < days.length; index++){
    console.log(days[index])
}