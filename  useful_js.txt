1. match 
    숫자, 문자 구분없이 사용 가능
    2진수에서 1의 개수 구할 때
    match(+정규식)를 사용하여 간단하게 처리 가능.
    null 처리 주의 필요.

2. isNaN
    숫자를 체크할 때 사용(Not a Number)
    isNaN("123") // false 숫자로 변환되어 처리
    isNaN(123) // false 숫자이므로 false
    isNaN("asdf") // ture 숫자가 아니여서

3. repeat
    특정 문자열을 특정 개수만큼 반복한 새문자열을 반환
    "a".repeat(3) // aaa

4. split
    문자열을 특정 문자를 기준으로 구분하여 배열을 만들어 반환
    const a = 12345;
    const b = a.toString.split(""); // [1,2,3,4,5]

5. join
    배열을 구성하는 요소들을 특정 문자를 기준으로 구분하여 문자열로 만들어 반환
    const a = [1,2,3,4,5]
    const b = a.join(""); //12345

6. sort & reverse 
    배열을 요소를 정렬합니다.
    const a [1,3,6,9];
    a.sort(); // a= [1,3,6,9]
    a.reverse(); // a = [9,6,3,1]
    주의할 점은 12보다 2가 더 우선순위가 높게 정렬된다.

7. substr
    문자열에서 특정부분만 잘라낼때 사용하는 메소드 입니다.
    substr(startIndex, length);
    첫번째 매개변수로 잘라낼 시작 index를 설정합니다.
    두번째 매개변수로 잘라낼 문자열 길이 length 를 설정합니다.
    만약에 두번 째 매개변수가 없으면 문자열의 끝까지를 잘라낸다.
    a = "asdfg"
    a.substr(1,2) // asd

8. substring
    문자열에서 특정부분만 잘라낼때 사용하는 메소드입니다.
    substring (index, index) 위에 있는 문법이랑 비슷하다.

9. slice 
    문자열에서 특정부분만 잘라낼때 사용하는 메소드로 substring 과 유사하다.
    차이점은 음수가 들어갔을 때 length+index로 처리되어 마지막 문자를 제거할 때 자주 사용된다.
    a = "asdfg"
    a.slice(0,-1) // asdf

10. Math.min, Math.max
    최소값, 최대값을 구할 때 사용

11. Array.prototype.map
    map 메소드는 배열 내의 모든 요소 각각에 대하여 callback 함수를 호출하고 그 결과를 모아서 새로운 배열을 반환합니다.
    배열의 각 요소 값의 타입을 캐스팅해야한다고 하면, for문으로 순회하면 변경할 필요없이 map을 사용하여 간단하게 해결이 가능합니다.
    let numberList = [1,2,3,4]
    let sqrList = numberList.map((item) => item = Math.sqrList(item));

12. Number.isInsteger()
    정수체크
    const a = 12, b = "12"
    Number.isInsteger(a) // true
    Number.isInsteger(b) // false